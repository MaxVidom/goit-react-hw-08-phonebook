{"version":3,"file":"static/js/119.66392b41.chunk.js","mappings":"yRAMe,SAASA,IACtB,OAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAgCF,EAAAA,EAAAA,UAAS,IAAzC,eAAOG,EAAP,KAAiBC,EAAjB,KACMC,GAAWC,EAAAA,EAAAA,MAEXC,EAAoB,SAAAC,GACxB,IAAMC,EAAYD,EAAIE,cAAcC,KAC9BC,EAAaJ,EAAIE,cAAcG,MACrC,OAAQJ,GACN,IAAK,QACHP,EAASU,GACT,MACF,IAAK,WACHR,EAAYQ,GACZ,MACF,QACE,OAEL,EAaD,OACE,UAACE,EAAA,EAAD,YACE,SAACC,EAAA,EAAD,CAAYC,MAAM,SAASC,QAAQ,KAAKC,UAAU,KAAKC,GAAI,EAAGC,GAAI,EAAlE,qBAGA,iBAAMC,OAAO,GAAGC,SAhBK,SAAAd,GACvBA,EAAIe,iBACJ,IAAMC,EAAO,CACXvB,MAAAA,EACAE,SAAAA,GAEFE,EAASoB,EAAAA,EAAAA,MAAqBD,IAC9BtB,EAAS,IACTE,EAAY,GACb,EAOG,UACE,UAACsB,EAAA,GAAD,CAAMC,WAAS,EAACC,UAAU,SAASC,WAAW,SAASC,QAAS,EAAhE,WACE,SAACJ,EAAA,GAAD,CAAMK,MAAI,EAAV,UACE,SAACC,EAAA,EAAD,CACEC,GAAI,CAAEC,MAAO,QACbjB,QAAQ,SACRkB,KAAK,QACLC,MAAM,SACNC,KAAK,QACL1B,KAAK,QACLE,MAAOZ,EACPqC,SAAU/B,OAGd,SAACmB,EAAA,GAAD,CAAMK,MAAI,EAAV,UACE,SAACC,EAAA,EAAD,CACEC,GAAI,CAAEC,MAAO,QACbjB,QAAQ,SACRkB,KAAK,QACLC,MAAM,WACNC,KAAK,WACL1B,KAAK,WACLE,MAAOV,EACPmC,SAAU/B,OAGd,SAACmB,EAAA,GAAD,CAAMK,MAAI,EAAV,UACE,SAACQ,EAAA,EAAD,CAAQF,KAAK,SAAb,4BAMX,C,2BC7DKvB,GAAY0B,E,QAAAA,KAuDlB,K","sources":["pages/Login/Login.jsx","../node_modules/@mui/system/esm/Container/Container.js"],"sourcesContent":["import { Container } from '@mui/system';\nimport { Typography, TextField, Button, Grid } from '@mui/material';\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { authOperations } from 'redux/auth';\n\nexport default function Login() {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const dispatch = useDispatch();\n\n  const handleInputChange = evt => {\n    const inputName = evt.currentTarget.name;\n    const inputValue = evt.currentTarget.value;\n    switch (inputName) {\n      case 'email':\n        setEmail(inputValue);\n        break;\n      case 'password':\n        setPassword(inputValue);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleFormSubmit = evt => {\n    evt.preventDefault();\n    const user = {\n      email,\n      password,\n    };\n    dispatch(authOperations.logIn(user));\n    setEmail('');\n    setPassword('');\n  };\n\n  return (\n    <Container>\n      <Typography align=\"center\" variant=\"h6\" component=\"h3\" pt={3} mb={5}>\n        Login:\n      </Typography>\n      <form action=\"\" onSubmit={handleFormSubmit}>\n        <Grid container direction=\"column\" alignItems=\"center\" spacing={6}>\n          <Grid item>\n            <TextField\n              sx={{ width: '50ch' }}\n              variant=\"filled\"\n              size=\"small\"\n              label=\"E-mail\"\n              type=\"email\"\n              name=\"email\"\n              value={email}\n              onChange={handleInputChange}\n            />\n          </Grid>\n          <Grid item>\n            <TextField\n              sx={{ width: '50ch' }}\n              variant=\"filled\"\n              size=\"small\"\n              label=\"Password\"\n              type=\"password\"\n              name=\"password\"\n              value={password}\n              onChange={handleInputChange}\n            />\n          </Grid>\n          <Grid item>\n            <Button type=\"submit\">Login</Button>\n          </Grid>\n        </Grid>\n      </form>\n    </Container>\n  );\n}\n","import PropTypes from 'prop-types';\nimport createContainer from './createContainer';\n/**\n *\n * Demos:\n *\n * - [Container (Material UI)](https://mui.com/material-ui/react-container/)\n * - [Container (MUI System)](https://mui.com/system/react-container/)\n *\n * API:\n *\n * - [Container API](https://mui.com/system/api/container/)\n */\n\nconst Container = createContainer();\nprocess.env.NODE_ENV !== \"production\" ? Container.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * If `true`, the left and right padding is removed.\n   * @default false\n   */\n  disableGutters: PropTypes.bool,\n\n  /**\n   * Set the max-width to match the min-width of the current breakpoint.\n   * This is useful if you'd prefer to design for a fixed set of sizes\n   * instead of trying to accommodate a fully fluid viewport.\n   * It's fluid by default.\n   * @default false\n   */\n  fixed: PropTypes.bool,\n\n  /**\n   * Determine the max-width of the container.\n   * The container width grows with the size of the screen.\n   * Set to `false` to disable `maxWidth`.\n   * @default 'lg'\n   */\n  maxWidth: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl', false]), PropTypes.string]),\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Container;"],"names":["Login","useState","email","setEmail","password","setPassword","dispatch","useDispatch","handleInputChange","evt","inputName","currentTarget","name","inputValue","value","Container","Typography","align","variant","component","pt","mb","action","onSubmit","preventDefault","user","authOperations","Grid","container","direction","alignItems","spacing","item","TextField","sx","width","size","label","type","onChange","Button","createContainer"],"sourceRoot":""}